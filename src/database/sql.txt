-- Crear el tipo ENUM para la columna tipo
CREATE TYPE tipo_tecnologia AS ENUM ('BACKEND', 'FRONTEND', 'TESTING', 'INTERFACE');

-- Crear la tabla tecnologias con la columna tipo que utiliza el ENUM
CREATE TABLE tecnologias (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    tipo tipo_tecnologia NOT NULL
);

-- Crear tabla ongs
CREATE TABLE ongs (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL
);

-- Crear tabla estudiantes
CREATE TABLE estudiantes (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    telefono VARCHAR(20),
    estado BOOLEAN DEFAULT TRUE,
    id_ong INTEGER,
    FOREIGN KEY (id_ong) REFERENCES ong(id)
);

-- Crear tabla estudiantes_tecnologias
CREATE TABLE estudiantes_tecnologias (
    id_tecnologia INTEGER NOT NULL,
    id_estudiante INTEGER NOT NULL,
    PRIMARY KEY (id_tecnologia, id_estudiante),
    FOREIGN KEY (id_tecnologia) REFERENCES tecnologias(id),
    FOREIGN KEY (id_estudiante) REFERENCES estudiantes(id)
);

-- Crear tabla empresas
CREATE TABLE empresas (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL
);

-- Crear tabla mentores
CREATE TABLE mentores (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    telefono VARCHAR(20),
    id_empresa INTEGER,
    estado BOOLEAN DEFAULT TRUE
    FOREIGN KEY (id_empresa) REFERENCES empresas(id)
);

-- Crear tabla mentores_tecnologias
CREATE TABLE mentores_tecnologias (
    id_tecnologia INTEGER NOT NULL,
    id_mentor INTEGER NOT NULL,
    PRIMARY KEY (id_tecnologia, id_mentor),
    FOREIGN KEY (id_tecnologia) REFERENCES tecnologias(id),
    FOREIGN KEY (id_mentor) REFERENCES mentores(id)
);

-- Crear tabla equipos
CREATE TABLE equipos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    tamano INTEGER NOT NULL,
    fecha_inicio DATE,
    fecha_fin DATE,
    id_mentor INTEGER,
    id_mentor_ux_ui INTEGER,
    id_mentor_qa INTEGER,
    FOREIGN KEY (id_mentor) REFERENCES mentores(id),
    FOREIGN KEY (id_mentor_ux_ui) REFERENCES mentores(id),
    FOREIGN KEY (id_mentor_qa) REFERENCES mentores(id)
);

-- Crear tabla equipos_estudiantes
CREATE TABLE equipos_estudiantes (
    id_equipo INTEGER NOT NULL,
    id_estudiante INTEGER NOT NULL,
    PRIMARY KEY (id_equipo, id_estudiante),
    FOREIGN KEY (id_equipo) REFERENCES equipos(id),
    FOREIGN KEY (id_estudiante) REFERENCES estudiantes(id)
);

-- Crear tabla administradores
CREATE TABLE administradores (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    apellido VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    contrasena VARCHAR(255) NOT NULL
);

--crear tabla de sesiones
CREATE TABLE sesiones (
    id SERIAL PRIMARY KEY,
    id_administrador INTEGER,
    token VARCHAR(300),
    fecha_creacion DATE,
    FOREIGN KEY (id_administrador) REFERENCES administradores(id)
);


-- Recrear tablas de auditoría
CREATE TABLE auditoria_estudiantes (
    id SERIAL PRIMARY KEY,
    id_estudiante INTEGER NOT NULL,
    fecha_baja TIMESTAMP NOT NULL,
    estado BOOLEAN NOT NULL
);

CREATE TABLE auditoria_mentores (
    id SERIAL PRIMARY KEY,
    id_mentor INTEGER NOT NULL,
    fecha_baja TIMESTAMP NOT NULL,
    estado BOOLEAN NOT NULL
);

CREATE TABLE auditoria_equipos (
    id SERIAL PRIMARY KEY,
    id_equipo INTEGER,
    nombre VARCHAR(255) NOT NULL,
    cantidad_estudiantes INTEGER NOT NULL,
    fecha_eliminacion TIMESTAMP NOT NULL
);

-- Trigger para estudiantes
CREATE OR REPLACE FUNCTION auditoria_estudiantes_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.estado = TRUE AND NEW.estado = FALSE THEN
        INSERT INTO auditoria_estudiantes (id_estudiante, fecha_baja, estado)
        VALUES (OLD.id, CURRENT_TIMESTAMP, NEW.estado);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_auditoria_estudiantes
AFTER UPDATE ON estudiantes
FOR EACH ROW
EXECUTE FUNCTION auditoria_estudiantes_trigger();

-- Trigger para mentores
CREATE OR REPLACE FUNCTION auditoria_mentores_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.estado = TRUE AND NEW.estado = FALSE THEN
        INSERT INTO auditoria_mentores (id_mentor, fecha_baja, estado)
        VALUES (OLD.id, CURRENT_TIMESTAMP, NEW.estado);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_auditoria_mentores
AFTER UPDATE ON mentores
FOR EACH ROW
EXECUTE FUNCTION auditoria_mentores_trigger();

-- Trigger para equipos
CREATE OR REPLACE FUNCTION auditoria_equipos_trigger()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO auditoria_equipos (id_equipo, nombre, cantidad_estudiantes, fecha_eliminacion)
    VALUES (OLD.id, OLD.nombre, OLD.tamano, CURRENT_TIMESTAMP);
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_auditoria_equipos
BEFORE DELETE ON equipos
FOR EACH ROW
EXECUTE FUNCTION auditoria_equipos_trigger();


``
CREATE TYPE tipo_correo_enum AS ENUM ('BIENVENIDA', 'SEGUIMIENTO');

-- 2. Crear la tabla tipo_correo
CREATE TABLE tipo_correo (
    id SERIAL PRIMARY KEY,
    tipo tipo_correo_enum NOT NULL UNIQUE
);

-- 3. Insertar los tipos de correo predefinidos
INSERT INTO tipo_correo (tipo) VALUES
('BIENVENIDA'),
('SEGUIMIENTO');

-- 4. Crear la tabla correos sin la columna equipo_id
CREATE TABLE correos (
    id SERIAL PRIMARY KEY,
    asunto VARCHAR(255) NOT NULL,
    cuerpo TEXT NOT NULL,
    fecha TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    remitente_id INTEGER NOT NULL,
    tipo_id INTEGER NOT NULL,

    -- Claves foráneas
    FOREIGN KEY (remitente_id) REFERENCES administradores(id) ON DELETE CASCADE,
    FOREIGN KEY (tipo_id) REFERENCES tipo_correo(id) ON DELETE RESTRICT
);

-- 6. Crear la tabla intermedia correo_equipo
CREATE TABLE correo_equipo (
    id SERIAL PRIMARY KEY,
    correo_id INTEGER NOT NULL,
    equipo_id INTEGER NOT NULL,

    -- Claves foráneas
    FOREIGN KEY (correo_id) REFERENCES correos(id) ON DELETE CASCADE,
    FOREIGN KEY (equipo_id) REFERENCES equipos(id) ON DELETE CASCADE
);

-- 8. Crear la tabla intermedia correo_estudiante
CREATE TABLE correo_estudiante (
    id SERIAL PRIMARY KEY,
    correo_id INTEGER NOT NULL,
    estudiante_id INTEGER NOT NULL,

    -- Claves foráneas
    FOREIGN KEY (correo_id) REFERENCES correos(id) ON DELETE CASCADE,
    FOREIGN KEY (estudiante_id) REFERENCES estudiantes(id) ON DELETE CASCADE
);